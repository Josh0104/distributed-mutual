// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/peer.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MutualService_Join_FullMethodName      = "/proto.MutualService/Join"
	MutualService_Leave_FullMethodName     = "/proto.MutualService/Leave"
	MutualService_Send_FullMethodName      = "/proto.MutualService/Send"
	MutualService_Broadcast_FullMethodName = "/proto.MutualService/Broadcast"
)

// MutualServiceClient is the client API for MutualService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishResponse, error)
	Broadcast(ctx context.Context, in *BroadcastSubscription, opts ...grpc.CallOption) (MutualService_BroadcastClient, error)
}

type mutualServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualServiceClient(cc grpc.ClientConnInterface) MutualServiceClient {
	return &mutualServiceClient{cc}
}

func (c *mutualServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, MutualService_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutualServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, MutualService_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutualServiceClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, MutualService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutualServiceClient) Broadcast(ctx context.Context, in *BroadcastSubscription, opts ...grpc.CallOption) (MutualService_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &MutualService_ServiceDesc.Streams[0], MutualService_Broadcast_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mutualServiceBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MutualService_BroadcastClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type mutualServiceBroadcastClient struct {
	grpc.ClientStream
}

func (x *mutualServiceBroadcastClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MutualServiceServer is the server API for MutualService service.
// All implementations must embed UnimplementedMutualServiceServer
// for forward compatibility
type MutualServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	Send(context.Context, *Message) (*PublishResponse, error)
	Broadcast(*BroadcastSubscription, MutualService_BroadcastServer) error
	mustEmbedUnimplementedMutualServiceServer()
}

// UnimplementedMutualServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMutualServiceServer struct {
}

func (UnimplementedMutualServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMutualServiceServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedMutualServiceServer) Send(context.Context, *Message) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMutualServiceServer) Broadcast(*BroadcastSubscription, MutualService_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedMutualServiceServer) mustEmbedUnimplementedMutualServiceServer() {}

// UnsafeMutualServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualServiceServer will
// result in compilation errors.
type UnsafeMutualServiceServer interface {
	mustEmbedUnimplementedMutualServiceServer()
}

func RegisterMutualServiceServer(s grpc.ServiceRegistrar, srv MutualServiceServer) {
	s.RegisterService(&MutualService_ServiceDesc, srv)
}

func _MutualService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutualService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutualService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutualService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutualService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutualServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutualService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutualServiceServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutualService_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BroadcastSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MutualServiceServer).Broadcast(m, &mutualServiceBroadcastServer{stream})
}

type MutualService_BroadcastServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type mutualServiceBroadcastServer struct {
	grpc.ServerStream
}

func (x *mutualServiceBroadcastServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// MutualService_ServiceDesc is the grpc.ServiceDesc for MutualService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MutualService",
	HandlerType: (*MutualServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MutualService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _MutualService_Leave_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _MutualService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _MutualService_Broadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/peer.proto",
}
